#!/usr/bin/env bass

(defn resource [platform image source]
  (defn check [version]
    (-> (/opt/resource/check {:source source :version version})
        (on-platform platform)
        (in-image image)))

  (defn get [version params]
    (-> (/opt/resource/in {:source source :version version :params params})
        (with-args ./)
        (on-platform platform)
        (in-image image)))

  (defn put [params]
    (-> (/opt/resource/out {:source source :params params})
        (with-args ./)
        (on-platform platform)
        (in-image image)))

  (fn cmdline
    (case cmdline
      [.check]
      (apply stream (next (run (check null))))

      [.check version]
      (apply stream (next (run (check version))))

      [.get version . params]
      (path (get version (list->object params)) ./)

      [.get-metadata version . params]
      (:metadata (next (run (get version (list->object params)))))

      [.put . params]
      (next (run (put version (list->object params)))))))

(defn get-latest [r . kwargs]
  (r .get (last (r .check)) . kwargs))

(def booklit
  (resource {:os "linux"}
            {:repository "concourse/git-resource"}
            {:uri "https://github.com/vito/booklit"}))

(def golang
  (resource {:os "linux"}
            {:repository "concourse/registry-image-resource"}
            {:repository "golang"}))

(defn image-resource [resource]
  (let [fetched (get-latest resource :format "oci")]
    fetched/image.tar))

(let [latest-booklit (get-latest booklit)
      build-docs (-> ($ latest-booklit/scripts/build-docs $latest-booklit)
                     (in-image (image-resource golang))
                     (on-platform {:os "linux"})
                     (response-from :exit))]
  (export (path build-docs ./docs/) /tmp/built-docs/))
